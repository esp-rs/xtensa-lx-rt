/* exception vector for the ESP32, requiring high priority interrupts and register window support */

/* high level exception/interrupt routines, which can be override with Rust functions */
PROVIDE(__exception = __default_exception);
PROVIDE(__user_exception = __default_user_exception);
PROVIDE(__double_exception = __default_double_exception);
PROVIDE(__level_1_interrupt = __default_interrupt);
PROVIDE(__level_2_interrupt = __default_interrupt);
PROVIDE(__level_3_interrupt = __default_interrupt);
PROVIDE(__level_4_interrupt = __default_interrupt);
PROVIDE(__level_5_interrupt = __default_interrupt);
PROVIDE(__level_6_interrupt = __default_interrupt);
PROVIDE(__level_7_interrupt = __default_interrupt);

/* low level exception/interrupt, which must be overridden using naked functions */
PROVIDE(__naked_user_exception = __default_naked_exception);
PROVIDE(__naked_kernel_exception = __default_naked_exception);
PROVIDE(__naked_double_exception = __default_naked_double_exception);
PROVIDE(__naked_level_2_interrupt = __default_naked_level_2_interrupt);
PROVIDE(__naked_level_3_interrupt = __default_naked_level_3_interrupt);
PROVIDE(__naked_level_4_interrupt = __default_naked_level_4_interrupt);
PROVIDE(__naked_level_5_interrupt = __default_naked_level_5_interrupt);
PROVIDE(__naked_level_6_interrupt = __default_naked_level_6_interrupt);
PROVIDE(__naked_level_7_interrupt = __default_naked_level_7_interrupt);


/* needed to force inclusion of the vectors */
EXTERN(__default_exception);
EXTERN(__default_double_exception);
EXTERN(__default_interrupt);

EXTERN(__default_naked_exception);
EXTERN(__default_naked_double_exception);
EXTERN(__default_naked_level_2_interrupt);
EXTERN(__default_naked_level_3_interrupt);
EXTERN(__default_naked_level_4_interrupt);
EXTERN(__default_naked_level_5_interrupt);
EXTERN(__default_naked_level_6_interrupt);
EXTERN(__default_naked_level_7_interrupt);


/* Define output sections */
SECTIONS {

  .vectors :
  {
    . = 0x0;
    _init_start = ABSOLUTE(.);
    . = {{ XCHAL_WINDOW_OF4_VECOFS }};
    KEEP(*(.WindowOverflow4.text));
    . = {{ XCHAL_WINDOW_UF4_VECOFS }};
    KEEP(*(.WindowUnderflow4.text));
    . = {{ XCHAL_WINDOW_OF8_VECOFS }};
    KEEP(*(.WindowOverflow8.text));
    . = {{ XCHAL_WINDOW_UF8_VECOFS }};
    KEEP(*(.WindowUnderflow8.text));
    . = {{ XCHAL_WINDOW_OF12_VECOFS }};
    KEEP(*(.WindowOverflow12.text));
    . = {{ XCHAL_WINDOW_UF12_VECOFS }};
    KEEP(*(.WindowUnderflow12.text));
    . = {{ XCHAL_INTLEVEL2_VECOFS }};
    KEEP(*(.Level2InterruptVector.text));
    . = {{ XCHAL_INTLEVEL3_VECOFS }};
    KEEP(*(.Level3InterruptVector.text));
    . = {{ XCHAL_INTLEVEL4_VECOFS }};
    KEEP(*(.Level4InterruptVector.text));
    . = {{ XCHAL_INTLEVEL5_VECOFS }};
    KEEP(*(.Level5InterruptVector.text));
    . = {{ XCHAL_INTLEVEL6_VECOFS }};
    KEEP(*(.DebugExceptionVector.text));
    . = {{ XCHAL_NMI_VECOFS }};
    KEEP(*(.NMIExceptionVector.text));
    . = {{ XCHAL_KERNEL_VECOFS }};
    KEEP(*(.KernelExceptionVector.text));
    . = {{ XCHAL_USER_VECOFS }};
    KEEP(*(.UserExceptionVector.text));
    . = {{ XCHAL_DOUBLEEXC_VECOFS }};
    KEEP(*(.DoubleExceptionVector.text));
    . = 0x400;

    _init_end = ABSOLUTE(.);
  } > vectors_seg
}
